{"version":3,"file":"static/js/main.chunk.js","sources":["/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/App.css","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/App.tsx","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/actions/menuActions.ts","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/actions/types.ts","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/components/Body.tsx","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/components/Header.tsx","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/index.css","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/index.tsx","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/reducers/index.ts","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/reducers/menuReducer.ts","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/serviceWorker.ts","/home/utkusarioglu/Documents/Projects/BasakBeykoz/basakbeykoz/wp-content/themes/basakbeykoz/react-src/src/store.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import React from \"react\";\nimport \"./App.css\";\n\nimport { Provider } from 'react-redux';\nimport store from \"./store\";\n\nimport Header from \"./components/Header\";\nimport Body from './components/Body'\n\n\n\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <Header />\n                <Body />\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","import {FETCH_MENU} from './types'\n\nimport WPAPI, { WPRequest } from \"wpapi\";\n\n\ninterface DispatchVars {\n    type: string,\n    data?: any,\n    error?: string,\n}\ntype DispatchMethod = (vars:DispatchVars) => void\n\nconst wp = new WPAPI({endpoint: \"./wp-json\"})\nwp.menus = wp.registerRoute(\"menus/v1\", \"/menus/(?P<term_id>)\");\n\nexport const fetchMenu = () => (dispatch: DispatchMethod) => {\n    (wp.menus().termId(8) as WPRequest)\n        .get((err: Error, data: any) => {\n            if(err) {\n                dispatch({\n                    type: FETCH_MENU,\n                    error: \"something went wrong\"\n                });\n            } else {\n                dispatch({\n                    type: FETCH_MENU,\n                    data: data.items\n                })\n            }\n        });\n}\n","export const FETCH_MENU = \"FETCH_MENU\";\nexport const FETCH_POST = \"FETCH_POST\";\n","import React from 'react'\n\nexport default function Body() {\n    return (\n        <div>\n            <p>this is the body or will be</p>\n        </div>\n    )\n}\n","import React, { useEffect, SyntheticEvent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchMenu } from \"../actions/menuActions\";\n\ninterface ReduxProps {\n    fetchMenu: () => void,\n}\n\ninterface wpMenuItem {\n    ID: number,\n    title: string,\n    slug: string,\n}\n\n// !HACK any used as type for props\nfunction Header(props: any): React.FunctionComponentElement<ReduxProps> {\n    console.log(\"render\")\n    const fetchMenu = props.fetchMenu; \n    useEffect(() => {\n        console.log(\"useEffect\")\n        fetchMenu();\n    }, [fetchMenu])\n\n    const menuOnClick = (event: SyntheticEvent) => {\n        alert(\"click\");\n    }\n\n    const menuItems: JSX.Element[] = props.menu\n        .map((item: wpMenuItem) => {\n            return (\n                <a  key={item.ID} \n                    href={item.slug || 'home'}\n                    onClick={(e) => menuOnClick(e)}>\n                        {item.title}\n                    </a>\n            )\n        })\n\n    console.log(\"menu\", props.menu)\n    return (\n        <header>\n            <h1>BasakBeykoz</h1>\n            {menuItems}\n        </header>\n    )\n}\n\n// !HACK any used as type\nconst mapStateToProps = (state: any) => ({\n    menu: state.menus.items\n});\n\nexport default connect(mapStateToProps, { fetchMenu })(Header);\n","// extracted by mini-css-extract-plugin","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {combineReducers} from 'redux';\nimport menuReducer from './menuReducer';\n\nexport default combineReducers({\n    menus: menuReducer,\n})\n","import {FETCH_MENU} from '../actions/types'\n\nconst initialState = {\n    items: []\n}\n\ninterface Action {\n    type: string,\n    data?: any,\n}\n\nexport default function(state = initialState, action: Action) {\n    switch (action.type) {\n        case FETCH_MENU:\n            return {\n                ...state,\n                items: action.data || []\n            }\n        default:\n            return state;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {}\n\nconst middleware = [thunk]\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middleware))\n\nexport default store\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAUA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAAA;AAAA;;;;;;;;;;;ACpDA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAEA;AACA;AADA;AASA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAPA;AASA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAUA;AACA,eAiCA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;A","sourceRoot":""}