@import './_variables';
@import './_functions';

///
/// Mixins
///
/// Mixins and functions have access to the variables while the rest of the
/// styles have to use getters to access these
///

/// Sets the min-width screen media query. This is a helper for breakpoint mixin
/// @param {px} $threshold_px - Min width threshold
/// @param {string} $media - type of media for the query
/// @content Content that shall be active when the media is greated than the min-width
/// @access private
/// @group helpers
@mixin _min-width($threshold_px, $media: screen) {
  @media #{$media} and (min-width: scut-rem($threshold_px, get-font-size(ScutRemBase__))) {
    @content;
  }
}

/// Sets the min-height screen media query. This is a helper for breakpoint
/// mixin
/// @param {px} $threshold_px - Min height threshold
/// @param {string} $media - type of media for the query
/// @content Content that shall be active when the media is greated than the min-height
/// @access private
/// @group helpers
@mixin _min-height($threshold, $media: screen) {
  @media #{$media} and (min-height: scut-rem($threshold, get-font-size(ScutRemBase__))) {
    @content;
  }
}

/// Sets properties required for an icon img used in header, and the social
/// media icons used in wider screens
/// @param {string} $filter - the string definintion of the css filter
/// @access public
/// @group helpers
@mixin icon-img($filter: var(--filter-white)) {
  height: #{get-component-property('social-item', 'default-size__') * 1px};
  width: #{get-component-property('social-item', 'default-size__') * 1px};
  padding: #{get-gap()};

  @include breakpoint('w', 'XGAplus__') {
    min-height: #{get-component-property('social-item', 'w-XGAplus_min__') * 1px};
    min-width: #{get-component-property('social-item', 'w-XGAplus_min__') * 1px};
    height: #{$social-icon_XGAplus_responsive_px};
    width: #{$social-icon_XGAplus_responsive_px};
    max-height: #{get-component-property('social-item', 'w-XGAplus_max__') * 1px};
    max-width: #{get-component-property('social-item', 'w-XGAplus_max__') * 1px};
  }
}

/// Helper function for building the responsive font-size
/// @param {string} - tag (ex: h1)
/// @access public
/// @group helpers
@function get-typography-responsive-font-size($tag) {
  @return responsive-width(
    get-typography($tag, 'font-size_min__'),
    get-typography($tag, 'font-size_max__')
  );
}

/// Helper function for building the responsive line-height
/// @param {string} - tag (ex: h1)
/// @access public
/// @group helpers
@function get-typography-responsive-line-height($tag) {
  @return responsive-width(
    get-typography($tag, 'line-height_min__'),
    get-typography($tag, 'line-height_max__')
  );
}

/// Helper function for creating mixins from heading tags such as h1, h2
/// @param {string} $tag - the html tag
/// @access private
/// @group helpers
@mixin _heading($tag) {
  $font-type: get-typography($tag, font-type);

  grid-area: #{$tag};
  color: #{getColor('text-mediumDark')};
  margin: 0;
  font-size: #{get-typography-responsive-font-size($tag)};
  line-height: #{get-typography-responsive-line-height($tag)};
  font-family: #{get-font-property($font-type, 'font-family')};
  font-weight: #{get-font-property($font-type, 'font-weight')};
}

/// Properties for h1
/// @access public
/// @group helpers
@mixin h1 {
  @include _heading(h1);
}

/// Properties for h2
/// @access public
/// @group helpers
@mixin h2 {
  @include _heading(h2);
}

/// Properties for h3
/// @access public
/// @group helpers
@mixin h3 {
  @include _heading(h3);
}

/// Properties for h4
/// @access public
/// @group helpers
@mixin h4 {
  @include _heading(h4);
}

/// Properties for h5
/// @access public
/// @group helpers
@mixin h5 {
  @include _heading(h5);
}

/// Properties for h6
/// @access public
/// @group helpers
@mixin h6 {
  @include _heading(h6);
}

/// Properties for p
/// @access public
/// @group helpers
@mixin p {
  @include p-basic();
  grid-area: paragraph;
  margin: 0 0 #{get-gap(2)} 0;
}

/// Basic properties for p, these could be used by tags and classes that aren't p
/// @access public
/// @group helpers
@mixin p-basic {
  color: #{getColor('text-mediumDark')};
  font-family: #{get-font-property('text', 'font-family')};
  font-weight: #{get-font-property('text', 'font-weight')};
  font-size: #{$p_font-size_responsive_px};
  line-height: #{$p_line-height_responsive_px};
}

/// Properties for svg art that is used at the bottom of homepage sections
/// @param {string} $filename - The path for the svg file
/// @param {px} $width_px - Width of the svg
/// @param {px} $height_px - Height of the svg
/// @param {px} $min-height_px - Min height that the svg is allowed to shrink. Defaults to min-width if undefined
/// @param {px} $max-height_px - Max height that the svg is allowed to grow. Defaults to max-width if undefined
/// @access public
/// @group helpers
@mixin svg-art(
  $filename,
  $width_px,
  $height_px,
  $min-height_px: $height_px,
  $max-height_px: $height_px
) {
  $react-app-uploads-dir: get-environment-variable('REACT_APP_UPLOADS_DIR');
  content: '';
  position: absolute;
  display: block;
  height: #{$height_px};
  max-height: #{$max-height_px};
  min-height: #{$min-height_px};
  background-size: contain;
  background-image: url('#{$react-app-uploads-dir}/#{$filename}');
  background-repeat: no-repeat;
  background-position: bottom center;
  z-index: 1;
  bottom: 0;
  left: 0;
  right: 0;
  pointer-events: none;
}

/// Used for limiting the number of p tag lines appearing in a container
/// @param {number} $line-count - Number of lines that shall be visible
/// @access public
/// @group helpers
@mixin limit-paragraph-lines($line-count: 3) {
  height: calc(#{get-typography(p, line-height)} * #{$line-count});
  overflow: hidden;
}

/// Adapts p attributes for use in buttons
/// @access public
/// @group helpers
@mixin typography-button() {
  @include p();
  font-family: #{get-font-property('heading', 'font-family')};
  font-weight: #{get-font-property('heading', 'font-weight')};
  margin: 0;
}

/// Hero typography properties
/// @access public
/// @group helpers
@mixin typography-hero() {
  font-size: responsive-width(35, 100, 250);
  line-height: responsive-width(60, 120, 250);
  font-family: #{get-font-property('hero', 'font-family')};
  font-weight: #{get-font-property('hero', 'font-weight')};
}

/// Creates a container for the media query
/// @param {string} $aspect - height, h, width or w to signify the dimension
/// @param {px} $size - the breakpoint in pixels
/// @param {string} $media - the type of media for which the query is written. Default value is screen
/// @group helpers
/// @access public
@mixin breakpoint($aspect, $size_px, $media: screen) {
  @if $aspect == height or $aspect == h {
    $screenPx: get-breakpoint(height, $size_px);
    @include _min-height($screenPx, $media) {
      @content;
    }
  } @else if $aspect == width or $aspect == w {
    $screenPx: get-breakpoint(width, $size_px);
    @include _min-width($screenPx, $media) {
      @content;
    }
  } @else {
    @error 'Unrecognized aspect. You can only use height, h, width and w';
  }
}

/**
  Computed
*/
$social-icon_XGAplus_responsive_px: responsive-width(
  get-component-property('social-item', 'default-size__'),
  get-component-property('social-item', 'w-XGAplus_max__'),
  get-breakpoint('w', 'XGAplus__'),
  get-breakpoint('w', 'FHD__')
);

$p_font-size_responsive_px: responsive-width(
  get-typography('p', 'font-size_min__'),
  get-typography('p', 'font-size_max__')
);
$p_line-height_responsive_px: responsive-width(
  get-typography('p', 'line-height_min__'),
  get-typography('p', 'line-height_max__')
);
