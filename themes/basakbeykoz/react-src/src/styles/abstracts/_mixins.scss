@import './_variables';
@import './_functions';

///
/// Mixins
///
/// Mixins and functions have access to the variables while the rest of the
/// styles have to use getters to access these
///

/// Sets the min-width screen media query. This is a helper for breakpoint mixin
/// @param {px} $threshold-px - Min width threshold
/// @param {string} $media - type of media for the query
/// @content Content that shall be active when the media is greated than the min-width
/// @access private
/// @group helpers
@mixin _min-width($threshold-px, $media: screen) {
  @media #{$media} and (min-width: scut-rem($threshold-px, get-font-size('scut-rem-base--'))) {
    @content;
  }
}

/// Sets the min-height screen media query. This is a helper for breakpoint
/// mixin
/// @param {px} $threshold-px - Min height threshold
/// @param {string} $media - type of media for the query
/// @content Content that shall be active when the media is greated than the min-height
/// @access private
/// @group helpers
@mixin _min-height($threshold, $media: screen) {
  @media #{$media} and (min-height: scut-rem($threshold, get-font-size('scut-rem-base--'))) {
    @content;
  }
}

/// Sets properties required for an icon img used in header, and the social
/// media icons used in wider screens
/// @param {string} $filter - the string definintion of the css filter
/// @access public
/// @group helpers
@mixin icon-img($filter: var(--filter-white)) {
  padding: #{get-gap()};
  width: #{get-component-property('social-item', 'default-size--') * 1px};
  height: #{get-component-property('social-item', 'default-size--') * 1px};

  @include breakpoint('w', 'XGAplus--') {
    width: #{get-social-icon-XGAplus-responsive-px()};
    min-width: #{get-component-property('social-item', 'w-XGAplus-min--') * 1px};
    max-width: #{get-component-property('social-item', 'w-XGAplus-max--') * 1px};
    height: #{get-social-icon-XGAplus-responsive-px()};
    min-height: #{get-component-property('social-item', 'w-XGAplus-min--') * 1px};
    max-height: #{get-component-property('social-item', 'w-XGAplus-max--') * 1px};
  }
}

/// Helper function for creating mixins from heading tags such as h1, h2
/// @param {string} $tag - the html tag
/// @access private
/// @group helpers
@mixin _heading($tag) {
  $font-type: get-typography($tag, font-type);
  $font-size: get-typography-responsive-font-size($tag);

  grid-area: #{$tag};
  margin: calc(#{$font-size} * 1.2) 0 calc(#{$font-size} / 1.5) 0;
  line-height: #{get-typography-responsive-line-height($tag)};
  color: #{get-color('text-mediumDark')};
  font-family: #{get-font-property($font-type, 'font-family')};
  font-size: #{$font-size};
  font-weight: #{get-font-property($font-type, 'font-weight')};
}

/// Properties for h1
/// @access public
/// @group helpers
@mixin h1 {
  @include _heading(h1);
}

/// Properties for h2
/// @access public
/// @group helpers
@mixin h2 {
  @include _heading(h2);
}

/// Properties for h3
/// @access public
/// @group helpers
@mixin h3 {
  @include _heading(h3);
}

/// Properties for h4
/// @access public
/// @group helpers
@mixin h4 {
  @include _heading(h4);
}

/// Properties for h5
/// @access public
/// @group helpers
@mixin h5 {
  @include _heading(h5);
}

/// Properties for h6
/// @access public
/// @group helpers
@mixin h6 {
  @include _heading(h6);
}

/// Properties for p
/// @access public
/// @group helpers
@mixin p {
  @include p-basic();

  $margin-bottom: #{get-typography-p-margin-bottom()};
  grid-area: paragraph;
  margin: 0 0 #{$margin-bottom} 0;
}

/// Basic properties for p, these could be used by tags and classes that aren't p
/// @access public
/// @group helpers
@mixin p-basic {
  line-height: #{get-typography-responsive-line-height('p')};
  color: #{get-color('text-mediumDark')};
  font-family: #{get-font-property('text', 'font-family')};
  font-size: #{get-typography-responsive-font-size('p')};
  font-weight: #{get-font-property('text', 'font-weight')};
}

/// Properties for svg art that is used at the bottom of homepage sections
/// @param {string} $filename - The path for the svg file
/// @param {px} $width-px - Width of the svg
/// @param {px} $height-px - Height of the svg
/// @param {px} $min-height-px - Min height that the svg is allowed to shrink. Defaults to min-width if undefined
/// @param {px} $max-height-px - Max height that the svg is allowed to grow. Defaults to max-width if undefined
/// @access public
/// @group helpers
@mixin svg-art(
  $filename,
  $width-px,
  $height-px,
  $min-height-px: $height-px,
  $max-height-px: $height-px
) {
  $env--react-app-uploads-dir: get-environment-variable(
    'REACT_APP_UPLOADS_DIR'
  );

  display: block;
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1;
  background-image: url('#{$env--react-app-uploads-dir}/#{$filename}');
  background-position: bottom center;
  background-repeat: no-repeat;
  background-size: contain;
  height: #{$height-px};
  min-height: #{$min-height-px};
  max-height: #{$max-height-px};
  content: '';
  pointer-events: none;
}

/// Used for limiting the number of lines appearing in a container
/// The line height used can be set by using the second parameter
/// @param {number} $line-count - Number of lines that shall be visible
/// @param {string} $p-type - the $TYPOGRAPHY_PROPERTIES key that will be
/// used for determining the line height.
/// @access public
/// @group helpers
@mixin limit-paragraph-lines($line-count: 3, $p-type: 'p') {
  height: calc(
    #{get-typography-responsive-line-height($p-type)} * #{$line-count} - 2px
  );
  overflow: hidden;
}

/// Adapts p attributes for use in buttons
/// @access public
/// @group helpers
@mixin typography-button() {
  @include p();

  margin: 0;
  font-family: #{get-font-property('heading', 'font-family')};
  font-weight: #{get-font-property('heading', 'font-weight')};
}

/// Hero typography properties
/// @access public
/// @group helpers
@mixin typography-hero() {
  line-height: responsive-width(60, 120, 250);
  font-family: #{get-font-property('hero', 'font-family')};
  font-size: responsive-width(35, 100, 250);
  font-weight: #{get-font-property('hero', 'font-weight')};
}

/// Creates a container for the media query
/// @param {string} $aspect - height, h, width or w to signify the dimension
/// @param {px} $size - the breakpoint in pixels
/// @param {string} $media - the type of media for which the query is written. Default value is screen
/// @group helpers
/// @access public
@mixin breakpoint($aspect, $size-px, $media: screen) {
  @if $aspect == height or $aspect == h {
    $screen-px: get-breakpoint(height, $size-px);

    @include _min-height($screen-px, $media) {
      @content;
    }
  } @else if $aspect == width or $aspect == w {
    $screen-px: get-breakpoint(width, $size-px);

    @include _min-width($screen-px, $media) {
      @content;
    }
  } @else {
    @error 'Unrecognized aspect. You can only use height, h, width and w';
  }
}

/// Sets the util classes that are used as custom css classes for framing
/// figures and other objects with colorful frames. With the current
/// implementation of the site, these kinds of frames used extensively in the
/// home page.
/// @param {string} - Color category for which the color value will be retireved
/// and applied as a frame
/// @access public
/// @group utils
@mixin set-frame-color($color) {
  /// These padding values determine the thickness of the frame in small and
  /// normal screen settings.
  $minimal-padding-half-px: #{get-component-property(
      'figure',
      'minimal-padding-px'
    ) / 2};
  $normal-padding-half-px: #{get-component-property(
      'figure',
      'normal-padding-px'
    ) / 2};
  $color-value: #{get-color('bg-' + $color)};
  /// A small nested list to define which alignment and location association
  $alignment-associations: ((horizontal, before), (vertical, after));

  /// Note that these frames use linear gradients to set frames above and
  /// below. The reason for using linear gradients is because the divs where
  /// these frames are attached are rendered by wordpress, so using before and
  /// after pseudo classes was the simplest way to create these 4 sides. To
  /// create 4 sides with 2 pseudo classes made it necessary to use linear
  /// gradients as a tool for transparent mid-section.
  @each $set in $alignment-associations {
    $alignment: nth($set, 1);
    $location: nth($set, 2);

    .#{$color}-#{$alignment}-border:#{$location} {
      background: linear-gradient-frame(
        $color-value,
        $alignment,
        $minimal-padding-half-px
      );

      @include breakpoint('w', 'WQVGA--') {
        background: linear-gradient-frame(
          $color-value,
          $alignment,
          $normal-padding-half-px
        );
      }
    }
  }
}

/// Retrieves the color value for the given color cateory and applies it as a bacground color.
/// @param {string} - color for which the value shall be received and applied
/// @group setter
/// @access public
@mixin set-bg-color($color) {
  $bg-color: 'bg-' + $color;
  $color-value: #{get-color($bg-color)};

  @at-root .bg-#{$color} {
    background-color: #{$color-value};
  }
}

/// The loop that runs all the color category related mixins
/// Color categories defines among the variables get classes created for them
/// Through this function
///
@mixin set-color-category-styles() {
  $color-categories: get-color-categories();

  @each $color in $color-categories {
    @include set-bg-color($color);
    @include set-frame-color($color);
  }
}

/// The standard button design
/// @access public
/// @group helpers
@mixin button-standard() {
  outline: none;
  border: none;
  border-radius: #{get-gap()};
  padding: #{get-gap()};
  width: 100%;

  &:hover {
    cursor: pointer;
  }
}

/// Creates the headings by looping through 1 - 6
/// @access public
/// @group setters
@mixin set-headings() {
  @for $i from 1 through 6 {
    $tag: 'h' + $i;

    @at-root #{$tag} {
      @include _heading($tag);
    }
  }
}

/// Creates the rounded gray frames that are used by quotes, page-top content lists
/// @access public
/// @group helpers
@mixin article-framed-content($padding, $normal-padding) {
  border-radius: #{$padding};
  overflow: hidden;
  background-color: get-color('bg-gray');

  @include breakpoint('w', 'WQVGA--') {
    border-radius: #{$normal-padding};
  }
}

/// Disables user's ability to select text and other items through cursor
/// @access public
/// @group helpers
@mixin disable-user-select() {
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  -khtml-user-select: none; /* Konqueror HTML */
  -moz-user-select: none; /* Old versions of Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none; /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
}

/// Sets 100% width and height
/// @access public
/// @group helpers
@mixin set-100-percent-size() {
  width: 100%;
  height: 100%;
}
