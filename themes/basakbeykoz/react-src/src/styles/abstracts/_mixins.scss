@import './_variables';

///
/// Mixins
///
/// Mixins and functions have access to the variables while the rest of the
/// styles have to use getters to access these
///

/// Sets the min-width screen media query. This is a helper for breakpoint mixin
/// @param {px} $threshold_px - Min width threshold
/// @param {string} $media - type of media for the query
/// @content Content that shall be active when the media is greated than the min-width
/// @access private
/// @group helpers
@mixin _min-width($threshold_px, $media: screen) {
  @media #{$media} and (min-width: scut-rem($threshold_px, get-font-size(ScutRemBase__))) {
    @content;
  }
}

/// Sets the min-height screen media query. This is a helper for breakpoint
/// mixin
/// @param {px} $threshold_px - Min height threshold
/// @param {string} $media - type of media for the query
/// @content Content that shall be active when the media is greated than the min-height
/// @access private
/// @group helpers
@mixin _min-height($threshold, $media: screen) {
  @media #{$media} and (min-height: scut-rem($threshold, get-font-size(ScutRemBase__))) {
    @content;
  }
}

/// Sets properties required for an icon img used in header, and the social
/// media icons used in wider screens
/// @param {string} $filter - the string definintion of the css filter
/// @access public
/// @group helpers
@mixin icon-img($filter: var(--filter-white)) {
  height: #{get-component-property('social-item', 'default-size__') * 1px};
  width: #{get-component-property('social-item', 'default-size__') * 1px};
  padding: #{$GAP_PX / 2};

  @include breakpoint('w', 'XGAplus__') {
    min-height: #{get-component-property('social-item', 'w-XGAplus_min__') * 1px};
    min-width: #{get-component-property('social-item', 'w-XGAplus_min__') * 1px};
    height: #{$social-icon_XGAplus_responsive_px};
    width: #{$social-icon_XGAplus_responsive_px};
    max-height: #{get-component-property('social-item', 'w-XGAplus_max__') * 1px};
    max-width: #{get-component-property('social-item', 'w-XGAplus_max__') * 1px};
  }
}

/// Helper function for creating mixins from heading tags such as h1, h2
/// @param {string} $tag - the html tag
/// @access private
/// @group helpers
@mixin _heading($tag) {
  $font-type: get-typography($tag, font-type);

  grid-area: #{$tag};
  color: #{getColor('text-mediumDark')};
  margin: 0;
  font-size: #{responsive-width(
      get-typography($tag, font-size_min__),
      get-typography($tag, font-size_max__)
    )};
  line-height: #{responsive-width(
      get-typography($tag, line-height_min__),
      get-typography($tag, line-height_max__)
    )};
  font-family: #{get-font-property($font-type, 'font-family')};
  font-weight: #{get-font-property($font-type, 'font-weight')};
}

/// Properties for h1
/// @access public
/// @group helpers
@mixin h1 {
  @include _heading(h1);
}

/// Properties for h2
/// @access public
/// @group helpers
@mixin h2 {
  @include _heading(h2);
}

/// Properties for h3
/// @access public
/// @group helpers
@mixin h3 {
  @include _heading(h3);
}

/// Properties for h4
/// @access public
/// @group helpers
@mixin h4 {
  @include _heading(h4);
}

/// Properties for h5
/// @access public
/// @group helpers
@mixin h5 {
  @include _heading(h5);
}

/// Properties for h6
/// @access public
/// @group helpers
@mixin h6 {
  @include _heading(h6);
}

/// Properties for p
/// @access public
/// @group helpers
@mixin p {
  @include p-basic();
  grid-area: paragraph;
  margin: 0 0 #{$GAP_PX} 0;
}

/// Basic properties for p, these could be used by tags and classes that aren't p
/// @access public
/// @group helpers
@mixin p-basic {
  color: #{getColor('text-mediumDark')};
  font-family: #{get-font-property('text', 'font-family')};
  font-weight: #{get-font-property('text', 'font-weight')};
  font-size: #{$p_font-size_responsive_px};
  line-height: #{$p_line-height_responsive_px};
}

/// Properties for svg art that is used at the bottom of homepage sections
/// @param {string} $filename - The path for the svg file
/// @param {px} $width_px - Width of the svg
/// @param {px} $height_px - Height of the svg
/// @param {px} $min-height_px - Min height that the svg is allowed to shrink. Defaults to min-width if undefined
/// @param {px} $max-height_px - Max height that the svg is allowed to grow. Defaults to max-width if undefined
/// @access public
/// @group helpers
@mixin svg-art(
  $filename,
  $width_px,
  $height_px,
  $min-height_px: $height_px,
  $max-height_px: $height_px
) {
  $react-app-uploads-dir: get-environment-variable('REACT_APP_UPLOADS_DIR');
  content: '';
  position: absolute;
  display: block;
  height: #{$height_px};
  max-height: #{$max-height_px};
  min-height: #{$min-height_px};
  background-size: contain;
  background-image: url('#{$react-app-uploads-dir}/#{$filename}');
  background-repeat: no-repeat;
  background-position: bottom center;
  z-index: 1;
  bottom: 0;
  left: 0;
  right: 0;
  pointer-events: none;
}

/// Used for limiting the number of p tag lines appearing in a container
/// @param {number} $line-count - Number of lines that shall be visible
/// @access public
/// @group helpers
@mixin limit-paragraph-lines($line-count: 3) {
  height: calc(#{get-typography(p, line-height)} * #{$line-count});
  overflow: hidden;
}

/// Adapts p attributes for use in buttons
/// @access public
/// @group helpers
@mixin typography-button() {
  @include p();
  font-family: #{get-font-property('heading', 'font-family')};
  font-weight: #{get-font-property('heading', 'font-weight')};
  margin: 0;
}

/// Hero typography properties
/// @access public
/// @group helpers
@mixin typography-hero() {
  font-size: responsive-width(35, 100, 250);
  line-height: responsive-width(60, 120, 250);
  font-family: #{get-font-property('hero', 'font-family')};
  font-weight: #{get-font-property('hero', 'font-weight')};
}

/// Retrieves color value
/// @param {string} $color-name - The name of the color
/// @return {color} The color value
/// @access public
/// @group getters
@function getColor($color-name) {
  @return map-get($COLORS, $color-name);
}

/// Getter for font properties
/// @param {string} $font-type - The type of font, values include text, header, hero
/// @param {string} $property-name - The name of the property
/// @return {any} The property value of the font
/// @group getters
/// @access public
@function get-font-property($font-type, $property-name) {
  @return map-get(map-get($FONT_TYPES, $font-type), $property-name);
}

/// Function to create a linear calc value that maps the min screen size with
/// the min-value and the max screen size to the max value given.
/// Note that this does not mean that the return of the function stays at min
/// value before the min-screen is reached, nor does it mean that once the
/// max size is reached the increase in size will cease. For these to happen,
/// you will need to set a min-width, max-width property to the object that
/// this function is used to set the widt.
/// @access public
/// @group helpers
/// @access public
@function responsive-width(
  $min-value,
  $max-value,
  $min-screen: get-breakpoint('w', 'QVGA__'),
  $max-screen: get-breakpoint('w', 'FHD__')
) {
  @return calc(
    #{$min-value}px + (#{$max-value} - #{$min-value}) *
      ((100vw - #{$min-screen * 1px}) / (#{$max-screen} - #{$min-screen}))
  );
}

/// Returns the value for a breakpoint
/// @param {string} $aspect - height or width. legal values: 'height', 'h', 'width', 'w'
/// @param {string} $size - The predefined size key
/// @return {number} Aspect breakpoint
/// @group getters
/// @access public
@function get-breakpoint($aspect, $size) {
  @if $aspect == width or $aspect == w {
    $aspect: width;
  } @else if $aspect == height or $aspect == h {
    $aspect: height;
  } @else {
    @error 'Unrecognized aspect. You can only use height, h, width and w';
  }
  @return map-get(map-get($BREAKPOINTS, $aspect), $size);
}

/// Creates a container for the media query
/// @param {string} $aspect - height, h, width or w to signify the dimension
/// @param {px} $size - the breakpoint in pixels
/// @param {string} $media - the type of media for which the query is written. Default value is screen
/// @group helpers
/// @access public
@mixin breakpoint($aspect, $size_px, $media: screen) {
  @if $aspect == height or $aspect == h {
    $screenPx: get-breakpoint(height, $size_px);
    @include _min-height($screenPx, $media) {
      @content;
    }
  } @else if $aspect == width or $aspect == w {
    $screenPx: get-breakpoint(width, $size_px);
    @include _min-width($screenPx, $media) {
      @content;
    }
  } @else {
    @error 'Unrecognized aspect. You can only use height, h, width and w';
  }
}

/// Returns the propery of a component
/// @param {string} $component-name - name of the component
/// @param {string} $property-name - name of the property
/// @return {any} the value of the property
/// @group getters
/// @access public
@function get-component-property($component-name, $property-name) {
  @return map-get(
    map-get($COMPONENT_PROPERTIES, $component-name),
    $property-name
  );
}

/// Getter for typography information for a specific tag and property
/// @param {string} $tag - Html tag
/// @param {string} $property-name - The name of the property
/// @return {any} The value for the tag and property
@function get-typography($tag, $property-name) {
  @return map-get(map-get($TYPOGRAPHY_PROPERTIES, $tag), $property-name);
}

/// Strips the unit attached to the value given
/// @param {number} $number - The value with the unit
/// @return {number} The value without the unit
/// @access public
/// @group helpers
@function strip-unit($number) {
  @return $number / ($number * 0 + 1);
}

/// Converts pixel information to rem units
/// @param {px} $value_px - Value in pixels
/// @param {number} $scut-rem-base - base value to use for rem
/// @return {rem} Px value converted to rem
/// @access public
/// @group helpers
@function scut-rem($value_px, $scut-rem-base) {
  @return strip-unit($value_px) / $scut-rem-base * 1rem;
}

/// Converts direction string to degree that makes sense to linear-gradient
/// @param {string} $direction - Direction, valid values are horizontal, h, vertical, v
/// @return {deg} Degree information
/// @access public
/// @group helpers
@function to-degree($direction) {
  @if $direction == horizontal or $direction == h {
    @return 90deg;
  } @else if $direction == vertical or $direction == v {
    @return 0deg;
  }
}

/// Creates one direction of the picture frames used in the app.
/// You need two of these to create the cross-like image frames
/// The reason for using linear gradient for these is that the images that these
/// stylize are rendered by wordpress, which means that unless we change the
/// render logic in wp, there is no way to define these with more conventional
/// methods
/// @param {color} $color - Color data for the frame
/// @param {string} $direction - Horizontal, h, vertical or v. This value is converted to a degree by the to-degree method
/// @return Linear gradient that is one of the dimensions of the frame
/// @access public
/// @group helpers
@function linear-gradient-frame($color, $direction) {
  $degree: to-degree($direction);
  @return linear-gradient(
    $degree,
    $color calc(#{$GAP_PX}/ 2),
    transparent calc(#{$GAP_PX}/ 2),
    transparent calc(100% - #{$GAP_PX}/ 2),
    $color calc(100% - #{$GAP_PX}/ 2)
  );
}

/// Returns the font size for the given font name
/// @param {string} $font-name - name of the font
/// @return {number | px | rem} Size of the font
/// @access public
/// @group getters
@function get-font-size($font-name) {
  @return map-get($FONT_SIZES, $font-name);
}

/// Getter for environment variables
/// Note that for now the environment variables are not really coming from .env
/// @param {string} $variable-key - Environment variable to get
/// @return {any} Environment variable
/// @access public
/// @group getter
@function get-environment-variable($variable-key) {
  @return map-get($ENV, $variable-key);
}

/**
  Computed
*/
$social-icon_XGAplus_responsive_px: responsive-width(
  get-component-property('social-item', 'default-size__'),
  get-component-property('social-item', 'w-XGAplus_max__'),
  get-breakpoint('w', 'XGAplus__'),
  get-breakpoint('w', 'FHD__')
);

$p_font-size_responsive_px: responsive-width(
  get-typography('p', 'font-size_min__'),
  get-typography('p', 'font-size_max__')
);
$p_line-height_responsive_px: responsive-width(
  get-typography('p', 'line-height_min__'),
  get-typography('p', 'line-height_max__')
);
