@import './vars';
@import './pure_functions';

@mixin _min-width($threshold) {
  @media screen and (min-width: scut-rem($threshold, map-get($FONT_SIZES, ScutRemBase__))) {
    @content;
  }
}

@mixin _min-height($threshold) {
  @media screen and (min-height: scut-rem($threshold, map-get($FONT_SIZES, ScutRemBase__))) {
    @content;
  }
}

@mixin headerIcon($filter: var(--filter-white)) {
  height: #{getComponentProperty(socialItem, defaultSize__)}px;
  width: #{getComponentProperty(socialItem, defaultSize__)}px;
  padding: #{$GAP / 2};
  // filter: $filter;
  @include viewport(w, XGAplus) {
    min-height: #{getComponentProperty(socialItem, wideScreen_MinSize__)}px;
    min-width: #{getComponentProperty(socialItem, wideScreen_MinSize__)}px;
    height: #{$socialIcon_WideScreen_Responsive_px};
    width: #{$socialIcon_WideScreen_Responsive_px};
    max-height: #{getComponentProperty(socialItem, wideScreen_MaxSize__)}px;
    max-width: #{getComponentProperty(socialItem, wideScreen_MaxSize__)}px;
  }
}

@mixin _heading($tag) {
  grid-area: #{$tag};
  color: #{getColor(text-mediumDark)};
  margin: 0;

  font-size: #{responsive(
      typography($tag, FontSize_Min__),
      typography($tag, FontSize_max__)
    )};
  line-height: #{responsive(
      typography($tag, LineHeight_Min__),
      typography($tag, LineHeight_Max__)
    )};
  font-family: #{typography($tag, fontFamily)};
  font-weight: #{typography($tag, font-weight)};
}

@mixin h1 {
  font-size: #{responsive(
      typography(h1, FontSize_Min__),
      typography(h1, FontSize_Max__)
    )};
  line-height: #{responsive(
      typography(h1, LineHeight_Min__),
      typography(h1, LineHeight_Max__)
    )};
  font-family: #{typography(h1, fontFamily)};
  font-weight: #{typography(h1, font-weight)};
}

@mixin h2 {
  @include _heading(h2);
}

@mixin h3 {
  @include _heading(h3);
}

@mixin h4 {
  @include _heading(h4);
}

@mixin h5 {
  @include _heading(h5);
}

@mixin h6 {
  @include _heading(h6);
}

@mixin p {
  @include basicP();
  grid-area: paragraph;
  margin: 0 0 #{$GAP} 0;
}

@mixin basicP {
  color: #{getColor(text-mediumDark)};
  font-family: #{font(text, font-family)};
  font-weight: #{font(text, font-weight)};
  font-size: #{$p_FontSize_Responsive};
  line-height: #{$p_LineHeight_Responsive};
}

@mixin svgArt(
  $filename,
  $width,
  $height,
  $min-height: $height,
  $max-height: $height
) {
  content: '';
  position: absolute;
  display: block;
  height: #{$height};
  max-height: $max-height;
  min-height: $min-height;
  background-size: contain;
  background-image: url('#{$REACT_APP_UPLOADS_DIR}/#{$filename}');
  background-repeat: no-repeat;
  background-position: bottom center;
  z-index: 1;
  bottom: 0;
  left: 0;
  right: 0;
  pointer-events: none;
}

@mixin limitParagraphLines($lineCount: 3) {
  height: calc(#{typography(p, LineHeight)} * #{$lineCount});
  overflow: hidden;
}

@mixin buttonText() {
  @include p();
  font-family: #{#{font(heading, font-family)}};
  font-weight: #{#{font(heading, font-weight)}};
  margin: 0;
}

/**
  Properties of the hero title font
*/
@mixin heroFont() {
  font-size: responsive(35, 100, 250);
  line-height: responsive(60, 120, 250);
  font-family: #{font(hero, font-family)};
  font-weight: #{font(hero, font-weight)};
}

@function getColor($colorName) {
  @return map-get($COLORS, $colorName);
}
