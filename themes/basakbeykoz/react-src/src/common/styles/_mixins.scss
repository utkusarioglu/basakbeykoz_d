@use "sass:map";
// @import "_vars";

@function scut-strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function scut-rem($pixels) {
  @return scut-strip-unit($pixels) / $scut-rem-base * 1rem;
}

@function adjustSize($minValue, $maxValue, $minScreen: 320, $maxScreen: 1920) {
  @return calc(
    #{$minValue}px + (#{$maxValue} - #{$minValue}) *
      ((100vw - #{$minScreen}px) / (#{$maxScreen} - #{$minScreen}))
  );
}

@mixin _min-width($threshold) {
  @media screen and (min-width: scut-rem($threshold)) {
    @content;
  }
}

@mixin _min-height($threshold) {
  @media screen and (min-height: scut-rem($threshold)) {
    @content;
  }
}

@mixin narrowScreen {
  $screenPx: map-get($screenSizes, narrow);
  @include _min-width($screenPx) {
    @content;
  }
}

@mixin wideScreen {
  $screenPx: map-get($screenSizes, wide);
  @include _min-width($screenPx) {
    @content;
  }
}

@mixin hugeScreen {
  $screenPx: map-get($screenSizes, huge);
  @include _min-width($screenPx) {
    @content;
  }
}

@mixin smallScreen {
  $screenPx: map-get($screenSizes, small);
  @include _min-height($screenPx) {
    @content;
  }
}

@mixin mediumTallScreen {
  $screenPx: map-get($screenSizes, mediumTall);
  @include _min-height($screenPx) {
    @content;
  }
}

@mixin headerIcon($filter: var(--filter-white)) {
  min-height: #{$socialIconMinSize_px}px;
  min-width: #{$socialIconMinSize_px}px;
  height: #{$socialIconActiveSize_px};
  width: #{$socialIconActiveSize_px};
  max-height: #{$socialIconMaxSize_px}px;
  max-width: #{$socialIconMaxSize_px}px;
  padding: #{$gap / 2};
  filter: $filter;
}

/* 
    IMAGE BORDERS 
*/
@function to-degree($direction) {
  @if $direction == horizontal {
    @return 90deg;
  } @else if $direction == vertical {
    @return 0deg;
  }
}

@function frame($color, $direction) {
  $degree: to-degree($direction);
  $at: #{$gap};
  @return linear-gradient(
    $degree,
    $color calc(#{$at}/ 2),
    transparent calc(#{$at}/ 2),
    transparent calc(100% - #{$at}/ 2),
    $color calc(100% - #{$at}/ 2)
  );
}

@mixin _heading($name, $fonts: $fonts) {
  $font-vals: map-get($fonts, $name);

  grid-area: Heading-#{$name};
  color: #{map-get($colorMap, text-mediumDark)};
  margin: 0;

  @each $key, $value in $font-vals {
    #{$key}: #{$value};
  }
}

@mixin h1 {
  @include _heading(h1);
}

@mixin h2 {
  @include _heading(h2);
}

@mixin h3 {
  @include _heading(h3);
}

@mixin h4 {
  @include _heading(h4);
}

@mixin h5 {
  @include _heading(h5);
}

@mixin h6 {
  @include _heading(h6);
}

@mixin p {
  grid-area: paragraph;
  color: #{map-get($colorMap, text-mediumDark)};
  font-family: $textFont;
  font-weight: $textFontWeight;
  font-size: $pFontSize;
  line-height: $pLineHeight;
  margin: 0 0 #{$gap} 0;
}

@mixin svgArt(
  $filename,
  $width,
  $height,
  $min-height: $height,
  $max-height: $height
) {
  $cityWidth: 100vw;
  content: "";
  position: absolute;
  display: block;
  height: #{$height};
  max-height: $max-height;
  min-height: $min-height;
  background-size: contain;
  background-image: url("#{$uploadsPath}/#{$filename}");
  background-repeat: no-repeat;
  background-position: bottom center;
  z-index: 1;
  bottom: 0;
  left: 0;
  right: 0;
  pointer-events: none;
}

@mixin limitParagraphLines($lineCount: 3) {
  // $pLineHeight: $pLineHeight;
  height: calc(#{$pLineHeight} * #{$lineCount});
  overflow: hidden;
}

@mixin buttonText() {
  @include p();
  font-family: #{$titleFont};
  font-weight: #{$titleFontWeight};
  margin: 0;
}
