@import './pure_functions';

$REACT_APP_UPLOADS_DIR: '/wp-content/uploads';

/**
  Font
*/
$FONT_SIZES: (
  default__: 20,
  mobileNavigation: 18px,
  excerpt: 15px,
  ScutRemBase__: 16,
);

$FONTS: (
  text: (
    font-family: var(--text-font),
    font-weight: var(--text-font-weight),
  ),
  heading: (
    font-family: var(--title-font),
    font-weight: var(--title-font-weight),
  ),
  hero: (
    font-family: "'KendiniYenidenKesfet', sans-serif",
    font-weight: 100,
  ),
);

$TEXT_PROPERTIES: (
  p: (
    FontSize_Min__: 20,
    FontSize_Max__: 26,
    LineHeight_Min__: 26,
    LineHeight_Max__: 38,
  ),
  h1: (
    FontSize_Min__: 26,
    FontSize_max__: 40,
    LineHeight_Min__: 30,
    LineHeight_Max__: 45,
    fontFamily: font(heading, font-family),
    fontWeight: font(heading, font-weight),
  ),
  h2: (
    FontSize_Min__: 23,
    FontSize_max__: 35,
    LineHeight_Min__: 28,
    LineHeight_Max__: 40,
    fontFamily: font(heading, font-family),
    fontWeight: font(heading, font-weight),
  ),
  h3: (
    FontSize_Min__: 20,
    FontSize_Max__: 25,
    LineHeight_Min__: 25,
    LineHeight_Max__: 30,
    fontFamily: font(heading, font-family),
    fontWeight: font(heading, font-weight),
  ),
  h4: (
    FontSize_Min__: 18,
    FontSize_max__: 24,
    LineHeight_Min__: 21,
    LineHeight_Max__: 27,
    fontFamily: font(heading, font-family),
    fontWeight: font(heading, font-weight),
  ),
  h5: (
    FontSize_Min__: 16,
    FontSize_max__: 26,
    LineHeight_Min__: 20,
    LineHeight_Max__: 30,
    fontFamily: font(heading, font-family),
    fontWeight: font(heading, font-weight),
  ),
  h6: (
    FontSize_Min__: 14,
    FontSize_max__: 20,
    LineHeight_Min__: 18,
    LineHeight_Max__: 24,
    fontFamily: font(heading, font-family),
    fontWeight: font(heading, font-weight),
  ),
);

/** 
  Screen width
*/
$VIEWPORT: (
  width: (
    HQVGA: 240,
    QVGA: 320,
    WQVGA: 480,
    SVGA: 800,
    XGAplus: 1152,
    FHD: 1920,
  ),
  height: (
    HD: 720,
    SVGA: 600,
  ),
);

$COMPONENT_PROPERTIES: (
  footer: (
    squareSize_px: 105px,
  ),
  logoNSocial: (
    y_px: 80px,
  ),
  socialItem: (
    defaultSize__: 20,
    wideScreen_MinSize__: 25,
    wideScreen_MaxSize__: 35,
  ),
  nav: (
    mobileHeight_px: 54px,
    socialSpace_x_px: 180px,
  ),
  featureImage: (
    height_px: 200px,
    narrow_x_vw: 25vw,
  ),
  home: (
    welcomeImage_x_vw: 45vw,
    posts_y_px: 150px,
    sectionHeight_min_px: 600px,
  ),
);

/** 
  Sizing
*/
$GAP: 30px;

/** 
  Color
*/
$COLORS: (
  text-light: var(--brush-white),
  text-mediumLight: var(--brush-gray),
  text-mediumDark: var(--brush-darkBlue),
  text-dark: var(--brush-black),
  bg-white: var(--brush-white),
  bg-gray: var(--brush-lightGray),
  bg-yellow: var(--brush-lightYellow),
  bg-blue: var(--brush-lightBlue),
  bg-green: var(--brush-lightGreen),
  bg-black: var(--brush-black),
  ui-white: var(--brush-white),
  ui-gray: var(--brush-gray),
  ui-yellow: var(--brush-darkYellow),
  ui-decoration: var(--brush-darkYellow),
  ui-darkBlue: var(--brush-darkBlue),
  ui-beige: var(--brush-lightYellow),
  ui-black: var(--brush-black),
  ui-blue: var(--brush-darkGray),
);

/**
  Computed
*/
$socialIcon_WideScreen_Responsive_px: responsive(
  getComponentProperty(socialItem, defaultSize__),
  getComponentProperty(socialItem, wideScreen_MaxSize__),
  map-get(map-get($VIEWPORT, width), XGAplus),
  map-get(map-get($VIEWPORT, width), FHD)
);

$p_FontSize_Responsive: responsive(
  typography(p, FontSize_Min__),
  typography(p, FontSize_Max__)
);
$p_LineHeight_Responsive: responsive(
  typography(p, LineHeight_Min__),
  typography(p, LineHeight_Max__)
);

/** 
  Var-coupled mixins and functions
*/
@function font($type, $property) {
  @return map-get(map-get($FONTS, $type), $property);
}

@function responsive(
  $minValue,
  $maxValue,
  $minScreen: viewport(w, QVGA),
  $maxScreen: viewport(w, FHD)
) {
  @return calc(
    #{$minValue}px + (#{$maxValue} - #{$minValue}) *
      ((100vw - #{$minScreen}px) / (#{$maxScreen} - #{$minScreen}))
  );
}

@function viewport($aspect, $size) {
  @if $aspect == width or $aspect == w {
    $aspect: width;
  } @else if $aspect == height or $aspect == h {
    $aspect: height;
  } @else {
    @error 'Unrecognized aspect. You can only use height, h, width and w';
  }
  @return map-get(map-get($VIEWPORT, $aspect), $size);
}

@mixin viewport($aspect, $size) {
  @if $aspect == height or $aspect == h {
    $screenPx: viewport(height, $size);
    @include _min-height($screenPx) {
      @content;
    }
  } @else if $aspect == width or $aspect == w {
    $screenPx: viewport(width, $size);
    @include _min-width($screenPx) {
      @content;
    }
  } @else {
    @error 'Unrecognized aspect. You can only use height, h, width and w';
  }
}

@function getComponentProperty($component, $property) {
  @return map-get(map-get($COMPONENT_PROPERTIES, $component), $property);
}

@function typography($tag, $property) {
  @return map-get(map-get($TEXT_PROPERTIES, $tag), $property);
}
